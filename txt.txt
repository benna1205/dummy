#aws provider
provider "aws" {
region = "ap-south-1"
}
#Created VPC		}
resource "aws_vpc" "vpc" {
cidr_block = "10.0.0.0/16"
tags = {
	Name = "testing vpc"
	}
}
#Created Internet Gateway

resource "aws_internet_gateway" "gateway" {
  vpc_id = aws_vpc.vpc.id
  tags = {
    Name = "IGW"
  }
}	
#Created the subnet for the same vpc
	
resource "aws_subnet" "subnet1" {
vpc_id = aws_vpc.vpc.id
cidr_block = "10.0.1.0/24"
map_public_ip_on_launch = true
tags = {
	Name = "subnet1"
	}
			}
resource "aws_subnet" "subnet2" {
vpc_id = aws_vpc.vpc.id
cidr_block = "10.0.2.0/24"
map_public_ip_on_launch = true
tags = {
        Name = "subnet1"
        }
			}
resource "aws_route_table" "way" {
vpc_id = aws_vpc.vpc.id
route {
cidr_block = "0.0.0.0/0"
gateway_id = aws_internet_gateway.gateway.id
}
}
resource "aws_route_table_association" "route1" {
  subnet_id      = aws_subnet.subnet1.id
  route_table_id = aws_route_table.way.id
}
resource "aws_route_table_association" "route2" {
  subnet_id      = aws_subnet.subnet2.id
  route_table_id = aws_route_table.way.id
}
resource "aws_security_group" "vpc_sg" {
  name   = "web"
  vpc_id = aws_vpc.vpc.id

  ingress {
    description = "HTTP from VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "Web-sg"
  }
}
resource "aws_instance" "instance1" {
  ami           = "ami-0c2af51e265bd5e0e"
  instance_type = "t2.micro"
  vpc_security_group_ids = [aws_security_group.vpc_sg.id]
  subnet_id              = aws_subnet.subnet1.id	
  availability_zone 	 = "ap-south-1c"
 tags = {
	Name = "linux_1_ubuntu"
	}
}
resource "aws_instance" "instance2" {
  ami           = "ami-0c2af51e265bd5e0e"
  instance_type = "t2.micro"
  vpc_security_group_ids = [aws_security_group.vpc_sg.id]
  subnet_id              = aws_subnet.subnet2.id
  availability_zone	 = "ap-south-1b"
 tags = {
        Name = "linux_2_ubuntu"
        }
}
resource "aws_lb" "vpc_lb" {
  name               = "vpc-lb-tf"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.vpc_sg.id]
  subnets            = [aws_subnet.subnet1.id, aws_subnet.subnet2.id]

 tags ={   
Name = "vpclb"
  }
}
resource "aws_lb_target_group" "lb_tg" {
  name     = "tf-example-lb-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.vpc.id

 health_check {
    path = "/"
    port = "traffic-port"
  }

}
resource "aws_lb_target_group_attachment" "tg_attach" {
  target_group_arn = aws_lb_target_group.lb_tg.arn
  target_id        = aws_instance.instance1.id
  port             = 80
}

resource "aws_lb_target_group_attachment" "tg_attach2" {
  target_group_arn = aws_lb_target_group.lb_tg.arn
  target_id        = aws_instance.instance2.id
  port             = 80
}
resource "aws_lb_listener" "connection_checking" {
  load_balancer_arn = aws_lb.vpc_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    target_group_arn = aws_lb_target_group.lb_tg.arn
    type             = "forward"
  }
}

output "loadbalancerdns" {
  value = aws_lb.vpc_lb.dns_name
}

