[?25l[J[J[J[J[J[J[?25h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[1;33r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[33;1H"test.tf" 170 lines, 3978 bytes[1;1Hprovider "aws" {
  region = "ap-south-1" #AWS provider
}

# Creating the VPC
resource "aws_vpc" "vpc" {
  cidr_block = "10.0.0.0/16"
}

# Creating two subnets with public access
resource "aws_subnet" "subnet1" {
  vpc_id[18C= aws_vpc.vpc.id
  cidr_block[14C= "10.0.1.0/24"
  availability_zone[7C= "ap-south-1a"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "subnet2" {
  vpc_id[18C= aws_vpc.vpc.id
  cidr_block[14C= "10.0.2.0/24"
  availability_zone[7C= "ap-south-1b"
  map_public_ip_on_launch = true
}

# Creating the Internet Gateway and adding it to VPC
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "main"
  }
}[1;1H[?25h[?4m
  

[33;1H[?2004l[>4;m[23;2t[23;1t[?2004l[?1l>[?1049l[23;0;0t[>4;mprovider "aws" {
  region = "ap-south-1" #AWS provider
}

# Creating the VPC
resource "aws_vpc" "vpc" { 
  cidr_block = "10.0.0.0/16"
}

# Creating two subnets with public access
resource "aws_subnet" "subnet1" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "ap-south-1a"
  map_public_ip_on_launch = true 
}

resource "aws_subnet" "subnet2" {
  vpc_id                  = aws_vpc.vpc.id        
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "ap-south-1b"
  map_public_ip_on_launch = true
}

# Creating the Internet Gateway and adding it to VPC
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "main"
  }
}

# Creating the routing table and associating it with the Internet Gateway and subnets
resource "aws_route_table" "way" {
  vpc_id = aws_vpc.vpc.id
  
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
}

resource "aws_route_table_association" "route1" {
  subnet_id      = aws_subnet.subnet1.id
  route_table_id = aws_route_table.way.id
}

resource "aws_route_table_association" "route2" {
  subnet_id      = aws_subnet.subnet2.id
  route_table_id = aws_route_table.way.id
}

# Creating the security group and allowing ports 80 and 22
resource "aws_security_group" "sgvpc" {
  name   = "web"  
  vpc_id = aws_vpc.vpc.id

  ingress {
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
}

# Creating two instances and installing NGINX on both servers
resource "aws_instance" "node1" {
  ami                    = "ami-0522ab6e1ddcc7055"
  instance_type          = "t2.micro"
  vpc_security_group_ids = [aws_security_group.sgvpc.id]
  subnet_id              = aws_subnet.subnet1.id
  user_data              = <<-EOF
#!/bin/bash
sudo apt update
sudo apt install nginx -y
sudo systemctl start nginx
sudo systemctl enable nginx
EOF
tags = {
Name = "Ubuntu"
}
}
resource "aws_instance" "node2" {
  ami                    = "ami-0522ab6e1ddcc7055"
  instance_type          = "t2.micro"
  vpc_security_group_ids = [aws_security_group.sgvpc.id]
  subnet_id              = aws_subnet.subnet2.id
  user_data              = <<-EOF
#!/bin/bash
sudo apt update
sudo apt install apache2 -y
sudo systemctl start apache2
sudo systemctl enable apache2
EOF
tags = {
 Name = "apache"
}
}
# Creating the Load Balancer and adding the target groups
resource "aws_lb" "lb" {
  name               = "marklb"
  internal           = false
  load_balancer_type = "application"

  security_groups = [aws_security_group.sgvpc.id]
  subnets         = [aws_subnet.subnet1.id, aws_subnet.subnet2.id]

  tags = {
    Name = "web"
  }
}

resource "aws_lb_target_group" "lbtg" {
  name     = "lbtg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.vpc.id

  health_check {
    path = "/"
    port = "traffic-port"
  }
}

resource "aws_lb_target_group_attachment" "binding" {
  target_group_arn = aws_lb_target_group.lbtg.arn
  target_id        = aws_instance.node1.id
  port             = 80
}

resource "aws_lb_target_group_attachment" "binding2" {
  target_group_arn = aws_lb_target_group.lbtg.arn
  target_id        = aws_instance.node2.id
  port             = 80
}

resource "aws_lb_listener" "checking" {
  load_balancer_arn = aws_lb.lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    target_group_arn = aws_lb_target_group.lbtg.arn
    type             = "forward"
  }
}

# Output the Load Balancer DNS
output "loadbalancerdns" {
  value = aws_lb.lb.dns_name
}

